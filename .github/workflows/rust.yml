name: build

on:
  push:
    branches:
      - master
      - 0.*
  pull_request:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  THREE_D_EXIT: 300
  THREE_D_CI: 1

jobs:
  desktop:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        rust: [ stable, nightly ]

    steps:
      - uses: actions/checkout@v2

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy
          override: true

      - name: Check
        uses: actions-rs/cargo@v1
        with:
          command: check

      - name: Rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test

  web:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build examples
        run: |
          for example in `find examples -maxdepth 1 -mindepth 1 -type d -printf "%f\n"` ; do
            if [ -f "examples/$example/Cargo.toml" ]; then
              echo "::group::Build $example example"
              pushd examples/$example
              CARGO_TARGET_DIR=../../target wasm-pack build --target web --out-name web --dev
              popd
              echo "::endgroup::"
            fi
          done

  cargo-deny:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: EmbarkStudios/cargo-deny-action@v1

  examples:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/cargo@v1
      - run: sudo apt-get update && sudo apt-get install -y xvfb

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-features

      - run: |
          for example in `find examples -maxdepth 1 -mindepth 1 -type d -printf "%f\n"` ; do
            if [ -f "examples/$example/Cargo.toml" ]; then
              echo "::group::Run $example example"
              xvfb-run -a cargo run --example $example --all-features
              echo "::endgroup::"
            fi
          done
